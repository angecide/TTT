{"version":3,"sources":["js/components.js","js/constants.js","js/abnegamax.js","js/main.js","index.js"],"names":["Board","props","map","pos","className","i","disabled","board","status","includes","player","value","win_line","String","turn","onClick","ResetButtons","val","idx","setState","reset","pos_to_lines","0","1","2","3","4","5","6","7","8","lines_to_pos","abnegamax","score","alpha","beta","move","depth","start","empty_pos","indexOf","Game","update","bind","state","this","board_array","score_array","ai","Array","fill","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6d0454e.chunk.js","sourcesContent":["/**\r\n * creates the on-screen board of the game, as well as handles the logic\r\n * of when to disable/enable each board cell etc.\r\n * @param {Object} props - Object\r\n * @param {Array.<int>} props.board - 3x3 board\r\n * @param {String} props.status - status text \r\n * @param {int} props.player - human player's side\r\n * @param {Array.<int>} props.win_line - contains the positions of the winning line\r\n * @param {function} props.onClick - onClick function from main, when pressing a board cell\r\n * @returns {div} - div containing the on-screen 3x3 board\r\n */\r\nexport function Board(props) {\r\n    return (\r\n        [0, 3, 6].map((pos) =>\r\n            <div key={pos} className='board'>\r\n                {\r\n                    [0, 1, 2].map((i) =>\r\n                        <button\r\n                            key={i + pos}\r\n                            className={\"square\"}\r\n                            disabled={\r\n                                props.board[i + pos] !== \"\" ||\r\n                                props.status.includes(\"YOU\") ||\r\n                                props.player === \"\"\r\n                            }\r\n                            value={props.win_line.includes(i + pos) ? \"win\" + String(props.turn) : \"\"}\r\n                            onClick={() => props.onClick(i + pos)}>\r\n                            {props.board[i + pos]}\r\n                        </button>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    );\r\n}\r\n\r\n/**\r\n * creates the on-screen three buttons above the board that resets the game\r\n * as well as configuring the player's and AI's side\r\n * @param {Object} props - Object\r\n * @param {function} props.setState - setState from main.js, updates the status text and rerenders\r\n * @param {functon} props.reset - reset from main.js, resets all the game's configuration\r\n * @returns {div} - div containing the three actionable buttons\r\n */\r\nexport function ResetButtons(props) {\r\n    return (\r\n        <div className=\"actions\">\r\n            {\r\n                [\"╳\", \"◯\"].map((val, idx) =>\r\n                    <button\r\n                        key={idx}\r\n                        className=\"reset\"\r\n                        onClick={() => props.setState(\r\n                            props.reset(1 - 2 * idx, \"PLAY THE GAME\")\r\n                        )}\r\n                        value={val}>\r\n                        {val}\r\n                    </button>\r\n                )\r\n            }\r\n            <button\r\n                className=\"reset\"\r\n                onClick={() => props.setState(props.reset(\"\", \"PICK A SIDE\"))}>\r\n                {\"CLEAR\"}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","/**\r\n * maps positions on board to the lines that contain the board position\r\n * i.e. 1 (second position) -> (1,3) (second column, first row)\r\n */\r\nexport const pos_to_lines = {\r\n    0: [0, 3, 6], 1: [1, 3], 2: [2, 3, 7],\r\n    3: [0, 4], 4: [1, 4, 6, 7], 5: [2, 4],\r\n    6: [0, 5, 7], 7: [1, 5], 8: [2, 5, 6]\r\n}\r\n\r\n/**\r\n * maps lines to the board positions that are contained on the line\r\n * i.e. 1 (second column) -> (1,4,7) (the board positions on the second column)\r\n */\r\nexport const lines_to_pos = {\r\n    0: [0, 3, 6], 1: [1, 4, 7], 2: [2, 5, 8],\r\n    3: [0, 1, 2], 4: [3, 4, 5], 5: [6, 7, 8],\r\n    6: [0, 4, 8], 7: [2, 4, 6]\r\n}","import { pos_to_lines } from './constants';\r\n\r\n/**\r\n * implemenetaion of negamax with alpha beta pruning\r\n * @param {Array.<int>} board - representation of the 3x3 board \r\n * @param {Array.<int>} score - tracks which lines on the board has been populated by which player \r\n * @param {int} turn - keeps track of whose turn it is inside the algorithm\r\n * @param {int} alpha - keeps track of the value of the maximizing player's current best move\r\n * @param {int} beta - keeps track of the value of the minimizing player's current best move\r\n * @param {int} move - keeps track of the maximizing/minimizing player's current best move\r\n * @param {int} depth - keeps track of the depth of the search\r\n * @returns {int} - returns the optimial move for the AI to play\r\n */\r\nexport function abnegamax(board, score, turn, alpha, beta, move, depth = 10) {\r\n    if (score.includes(-turn * 3)) {\r\n        return -turn * depth;\r\n    }\r\n    let start = 0;\r\n    while (true) {\r\n        let empty_pos = board.indexOf(\"\", start);\r\n        if (empty_pos === -1) {\r\n            if (start === 0) {\r\n                return 0;\r\n            }\r\n            break;\r\n        }\r\n        board[empty_pos] = turn;\r\n        for (const pos of pos_to_lines[empty_pos]) {\r\n            score[pos] += turn;\r\n        }\r\n        const value = abnegamax(board, score, -turn, beta, alpha, empty_pos, depth - 1);\r\n        [move, alpha] = turn * value > turn * alpha ? [empty_pos, value] : [move, alpha];\r\n        board[empty_pos] = \"\";\r\n        for (const pos of pos_to_lines[empty_pos]) {\r\n            score[pos] -= turn;\r\n        }\r\n        if (turn * alpha >= turn * beta)\r\n            break;\r\n        start = empty_pos + 1;\r\n    }\r\n    return depth === 10 ? move : alpha;\r\n}","import React from 'react';\r\nimport { Board, ResetButtons } from './components';\r\nimport { pos_to_lines, lines_to_pos } from './constants';\r\nimport { abnegamax } from './abnegamax';\r\n\r\nexport class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.update = this.update.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.setState = this.setState.bind(this);\r\n        this.state = this.reset(\"\", \"PICK A SIDE\");\r\n    }\r\n\r\n    /**\r\n     * updates the board when a valid move has been played\r\n     * @param {int} pos - the position of the cell that needs to be updated \r\n     */\r\n    update(pos) {\r\n        this.board_array[pos] = this.turn === 1 ? \"╳\" : \"◯\";\r\n        for (const idx of pos_to_lines[pos]) {\r\n            this.score_array[idx] += this.turn;\r\n        }\r\n        this.win_line = this.score_array.indexOf(this.turn * 3);\r\n        if (this.win_line > -1) {\r\n            this.setState({ status: this.player === this.turn ? \"YOU WIN\" : \"YOU LOSE\" });\r\n        } else if (!this.board_array.includes(\"\")) {\r\n            this.setState({ status: \"THE GAME IS A DRAW\" });\r\n        } else {\r\n            this.turn = -this.turn;\r\n            this.setState({ status: \"PLAY THE GAME\" })\r\n            if (this.ai === this.turn) {\r\n                this.update(abnegamax(this.board_array, this.score_array,\r\n                    this.turn, - this.ai * 20, this.ai * 20));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * resets the all the game's configurations\r\n     * @param {int} player - the human player's side\r\n     * @param {String} status - the status text\r\n     */\r\n    reset(player, status) {\r\n        this.board_array = Array(9).fill(\"\");\r\n        this.score_array = Array(8).fill(0);\r\n        this.player = player;\r\n        this.ai = -player;\r\n        this.turn = 1;\r\n        this.win_line = -1;\r\n        if (this.ai === this.turn) {\r\n            this.update(abnegamax(this.board_array, this.score_array,\r\n                this.turn, - this.ai * 20, this.ai * 20));\r\n        }\r\n        return {\r\n            status: status\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"header\">{\"Tic Tac Toe\"}</div>\r\n                <ResetButtons\r\n                    setState={this.setState}\r\n                    reset={this.reset}\r\n                />\r\n                <Board\r\n                    onClick={this.update}\r\n                    board={this.board_array}\r\n                    status={this.state.status}\r\n                    player={this.player}\r\n                    win_line={this.win_line > -1 ? lines_to_pos[this.win_line] : []}\r\n                    turn={this.turn}\r\n                />\r\n                <div className=\"status\"> {this.state.status}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Game } from './js/main';\r\nimport './css/style.css';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}